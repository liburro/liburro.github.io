<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>[python]-lib-virtualenv</title>
      <link href="/2018/04/27/python-virtualenv/"/>
      <url>/2018/04/27/python-virtualenv/</url>
      <content type="html"><![CDATA[<p>现在python有python2和python3两个版本，在windows上支持同时安装这两个版本的解释器，那么如何快速切换我们的开发环境呢。</p><p>首先如果只是作为调试，我们可以使用py -2和py -3命令来进入python的版本。</p><p><img src="/2018/04/27/python-virtualenv/py2-py3-console.png" alt="py2-py3-console"></p><p>同理，pip也支持：</p><p><img src="/2018/04/27/python-virtualenv/pip-console.png" alt="pip-console"></p><p>下面说一下virtualenv这个工具的使用，看下面的实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files&gt;virtualenv -p &quot;D:\Program Files\Python3\python.exe&quot; py3</span><br></pre></td></tr></table></figure><p>机器上安装了py2，在c:\python27下面，也安装了py3，在d:\program files\python3下面</p><p>现在使用上面的命令，会在在d:\program files\下面生成一个py3的文件夹，-p参数指定了这个环境的解释器版本</p><p>里面内容类似：</p><p><img src="/2018/04/27/python-virtualenv/py3-virtual.png" alt="py3-virtual"></p><p>我们进入scripts目录下执行active.bat：</p><p><img src="/2018/04/27/python-virtualenv/py3-active.png" alt="py3-active"></p><p>可以看见直接使用的是python命令，并且进入了python3的环境。注意上面的实际配置路径需要根据你自己机器上的路径配置。</p><p>virtualenv工具的作用就是创建一个独立的python开发环境，这里面的所有环境都是独立的，不会影响你原来的环境等信息(当然可以认为的修改)。</p><p>我们来看一下pip的使用：<br><img src="/2018/04/27/python-virtualenv/pip-virtual1.png" alt="pip-virtual"><br><img src="/2018/04/27/python-virtualenv/pip-virtual2.png" alt="pip-virtual"><br><img src="/2018/04/27/python-virtualenv/pip-virtual3.png" alt="pip-virtual"><br><img src="/2018/04/27/python-virtualenv/pip-virtual4.png" alt="pip-virtual"></p><p>红色区域1：在虚拟环境下进入python，引入一个click库，由于没有安装，所以引入失败<br>红色区域2：我们在虚拟环境下使用pip install click安装了click这个库，再次引入，成功了<br>红色区域3：调用deactive.bat退出当前的虚拟环境<br>红色区域4：进入系统的python3,引入click，引入失败，因为虚拟环境没有改变我们的外部环境</p><p>virtualenv还有很多的参数，通过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -h</span><br></pre></td></tr></table></figure></p><p>可以查看帮助信息</p><p>备注：<br>py.exe 可以在c:/Windows下找到<br>virtualenv.exe 可以在c:/Python27/Scripts下找到，当然根据你实际安装环境来决定位置</p>]]></content>
      
      <categories>
          
          <category> PYTHON </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[mysql]-mysql学习环境搭建</title>
      <link href="/2018/04/26/mysql-config/"/>
      <url>/2018/04/26/mysql-config/</url>
      <content type="html"><![CDATA[<p>本文主要介绍了学习sql语句的环境配置，主要使用windows+xampp进行一键环境搭建，用于学习sql基本语句已经完全够用。</p><a id="more"></a><h2 id="xampp的配置"><a href="#xampp的配置" class="headerlink" title="xampp的配置"></a>xampp的配置</h2><p><a href="!https://www.apachefriends.org/zh_cn/index.html">xampp</a>是一个强大的建站集成软件包，里面包含了Apache, Mysql, PHP等常用的环境。而且支持Windows, Linux, Mac OS等环境，语言也支持中文。本文以windows为例进行配置。</p><p>下载好xampp以后，全部默认点击下一步就可以安装完成，默认一般安装在c:\xampp这个位置，桌面也会生成xampp的快捷方式，打开后类似如下界面：</p><p><img src="/2018/04/26/mysql-config/xampp-startup.png" alt="xampp-startup"></p><p>分别把Apache和MySQL启动起来，其它的不在本文讨论范围，启动后类似界面如下：</p><p><img src="/2018/04/26/mysql-config/xampp-mysql.png" alt="xampp-mysql"></p><p>点击MySQL的Admin，将会打开一个浏览器窗口，类似如下界面：</p><p><img src="/2018/04/26/mysql-config/xampp-phpmyadmin.png" alt="xampp-phpmyadmin"></p><p>其中红色框内的几个区域说明如下：<br>区域1：表示当前mysql数据库里面有哪些数据库<br>区域2：表示当前选中的数据库sks下面有哪些数据表<br>区域3和区域4：表示对选中的数据库进行SQL语句，也就是以后使用SQL语句进行增删查改操作的地方<br>区域5：最后执行</p><p>OK,经过上面的配置，基本的使用mysql来学习SQL语句已经可以满足要求了。</p>]]></content>
      
      <categories>
          
          <category> DATABASE </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[robotframework]-指导说明</title>
      <link href="/2018/04/26/robotframework-user-guide/"/>
      <url>/2018/04/26/robotframework-user-guide/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> ROBOTFRAMEWORK </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[英语语法]-表语</title>
      <link href="/2018/04/26/english-predicative/"/>
      <url>/2018/04/26/english-predicative/</url>
      <content type="html"><![CDATA[<a id="more"></a><p>表语是紧跟系动词之后的结构，一般称及物动词之后的结构为宾语，系动词之后的结构为表语。<br>表语用来表述主语的身份，状态，特征等信息。</p><p>He looks good. look这里作为系动词，good是一个形容词，作为表语。</p><p>常用的系动词有：</p><blockquote><p>am/is/are keep seem appear become feel get grow remain smell look sound stay taste</p></blockquote><p>大多数情况，系动词也具有及物动词的词性，请看下面的两个keep：</p><h5 id="句1"><a href="#句1" class="headerlink" title="句1"></a>句1</h5><p>I <em>keep</em> silent in class.</p><h5 id="句2"><a href="#句2" class="headerlink" title="句2"></a>句2</h5><p>I <em>keep</em> books in my room.</p><h5 id="我们先看下系动词的两个特点"><a href="#我们先看下系动词的两个特点" class="headerlink" title="我们先看下系动词的两个特点"></a>我们先看下系动词的两个特点</h5><ol><li><strong>系动词后可以跟名词和形容词</strong></li><li><strong>系动词在替换为be动词之后，句子语义基本不变</strong></li></ol><p>请看：</p><p>系动词之后接名词：<br>Adventure <em>becomes</em> a part of my life.<br>Pollution <em>remains</em> a troubling problem.</p><p>系动词之后接形容词(一般及物动词不具有这个特性)：<br>She <em>looks</em> a little tired.<br>The shop <em>stays</em> open.</p><p>系动词替换为be动词之后，语义基本不变：<br>Adventure <em>is</em> a part of my life.<br>She <em>was</em> a little tired.</p><p>好，现在来看<a href="#句1">句1</a>和<a href="#句2">句2</a>的比较：<br>根据<a href="#我们先看下系动词的两个特点">系动词特点</a>1，可以发现<a href="#句1">句子1</a>中的<em>keep</em>肯定是系动词，应为silent是形容词，及物动词不具有这个特性。<br>那么根据<a href="#我们先看下系动词的两个特点">特点1</a>无法判断<a href="#句2">句子2</a>的<em>keep</em>属性，因为book是一个名词，系动词和及物动词都有这个特性，那么根据<a href="#我们先看下系动词的两个特点">特点2</a>进行判断，把<em>keep</em>替换为be动词查看语义是否变化：<br>I is books in my room.显然这个句子是有歧义的，那么就不是系动词，因为替换后的语义都变化了，所以这里也不能进行替换，那么<em>keep</em>就是一个及物动词。</p>]]></content>
      
      <categories>
          
          <category> ENGLISH </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[python]-字典的使用</title>
      <link href="/2018/04/26/python-dict/"/>
      <url>/2018/04/26/python-dict/</url>
      <content type="html"><![CDATA[<p>本文以python3.6.5本本为例。</p><a id="more"></a><h2 id="字典基础操作"><a href="#字典基础操作" class="headerlink" title="字典基础操作"></a>字典基础操作</h2><h3 id="判断key是否在字典中"><a href="#判断key是否在字典中" class="headerlink" title="判断key是否在字典中"></a>判断key是否在字典中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: test_dict</span><br><span class="line">Out[<span class="number">2</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="keyword">if</span> <span class="string">'a'</span> <span class="keyword">in</span> test_dict:</span><br><span class="line">   ...:     print(<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="遍历字典的key"><a href="#遍历字典的key" class="headerlink" title="遍历字典的key"></a>遍历字典的key</h3><p>方式一：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> test_dict:</span><br><span class="line">    ...:     print(i, end=<span class="string">' '</span>)</span><br><span class="line">a b c</span><br></pre></td></tr></table></figure></p><p>方式二：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">13</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> test_dict.keys():</span><br></pre></td></tr></table></figure></p><blockquote><p>注意python3里面没有iterkeys()这个函数了。</p></blockquote><h3 id="获取字典的值"><a href="#获取字典的值" class="headerlink" title="获取字典的值"></a>获取字典的值</h3><h4 id="get-key-value-None"><a href="#get-key-value-None" class="headerlink" title="get(key, value=None)"></a>get(key, value=None)</h4><p>有一种情况，当字典存在某个key时，把key对应的值赋值给某个变量，当不存在这个key时，这个变量获得None值。使用dict.get()方法可以完成这个逻辑。<br>get方法接收两个参数，第一个是需要判定的key，第二个是如果key不存在时此方法返回的值，默认值是None，函数返回key对应的值或者第二个参数的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">27</span>]: test_dict</span><br><span class="line">Out[<span class="number">27</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: test_dict.get(<span class="string">'a'</span>) <span class="comment">#'a'这个key在字典中，所以返回实际的值</span></span><br><span class="line">Out[<span class="number">28</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: test_dict.get(<span class="string">'d'</span>, <span class="number">4</span>) <span class="comment">#'d'这个key不在字典中，所以返回第二个参数的值4</span></span><br><span class="line">Out[<span class="number">29</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: print(test_dict.get(<span class="string">'e'</span>)) <span class="comment">#'e'这个key不在字典中，没有提供第二个参数，返回None</span></span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure><h4 id="setdefault-key-value-None"><a href="#setdefault-key-value-None" class="headerlink" title="setdefault(key, value=None)"></a>setdefault(key, value=None)</h4><p>当key存在于字典中，那么返回这个key对应的值，如果不存在，则设置字典的key为对应的value，并且返回vlaue。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">31</span>]: test_dict</span><br><span class="line">Out[<span class="number">31</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: test_dict.setdefault(<span class="string">'a'</span>, <span class="number">3</span>)</span><br><span class="line">Out[<span class="number">32</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: test_dict</span><br><span class="line">Out[<span class="number">33</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: test_dict.setdefault(<span class="string">'d'</span>, <span class="number">4</span>)</span><br><span class="line">Out[<span class="number">34</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: test_dict</span><br><span class="line">Out[<span class="number">35</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: test_dict.setdefault(<span class="string">'d'</span>)</span><br><span class="line">Out[<span class="number">36</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: test_dict.setdefault(<span class="string">'e'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: test_dict</span><br><span class="line">Out[<span class="number">38</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'e'</span>: <span class="keyword">None</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="同时遍历key和value"><a href="#同时遍历key和value" class="headerlink" title="同时遍历key和value"></a>同时遍历key和value</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">42</span>]: test_dict</span><br><span class="line">Out[<span class="number">42</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'e'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: <span class="keyword">for</span> k, v <span class="keyword">in</span> test_dict.items():</span><br><span class="line">    ...:     print(k, v)</span><br><span class="line">    ...:</span><br><span class="line">a <span class="number">1</span></span><br><span class="line">b <span class="number">2</span></span><br><span class="line">c <span class="number">3</span></span><br><span class="line">d <span class="number">4</span></span><br><span class="line">e <span class="keyword">None</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： python3已经没有iteritems()函数。</p></blockquote><h2 id="字典视图对象"><a href="#字典视图对象" class="headerlink" title="字典视图对象"></a>字典视图对象</h2><p>字典视图可以动态反馈字典的各种修改。</p><p>使用dict.keys(), dict.values(), dict.items()返回的就是字典的视图对象。</p><blockquote><p>python2里面是通过dict.viewkeys(), dict.viewvalues(), dict.viewitems()返回的字典视图对象。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">44</span>]: test_dict</span><br><span class="line">Out[<span class="number">44</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'e'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: keys = test_dict.keys()</span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: keys</span><br><span class="line">Out[<span class="number">46</span>]: dict_keys([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: values = test_dict.values()</span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: values</span><br><span class="line">Out[<span class="number">48</span>]: dict_values([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="keyword">None</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: len(keys)</span><br><span class="line">Out[<span class="number">49</span>]: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: test_dict.setdefault(<span class="string">'f'</span>, <span class="number">6</span>)</span><br><span class="line">Out[<span class="number">50</span>]: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: len(keys)</span><br><span class="line">Out[<span class="number">51</span>]: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: keys</span><br><span class="line">Out[<span class="number">52</span>]: dict_keys([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>])</span><br></pre></td></tr></table></figure><h2 id="lib-OrderedDict"><a href="#lib-OrderedDict" class="headerlink" title="lib-OrderedDict"></a>lib-OrderedDict</h2><p>我们知道，dict是无序的，也就是说我们插入数据以后，我们的数据在dict里面是无序的，不是按照插入的顺序排列的，python提供了OrdereDict这个类，保证了dict是按照我们插入的顺序排列的。</p><p>使用之前需要引入：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDcit</span><br></pre></td></tr></table></figure></p><p>使用方法和一般字典使用方法一致。注意函数popitem()的使用。</p><h3 id="popitem"><a href="#popitem" class="headerlink" title="popitem()"></a>popitem()</h3><p>在一般字典中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.popitem()</span><br></pre></td></tr></table></figure></p><p>返回(key, value)并且从字典中移除这一队值，注意，这里移除是任意的，不确定移除谁，因为dict是无序的。如果字典是空，这里将抛出KeyError异常</p><p>在OrderedDict中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ord.popitem(last=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><p>这里有一个参数last，默认是True，表示移除最后一个元素，如果为False，则移除第一个元素，这里移除的内容就一定是确定的。同理，字典为空，抛出KeyError异常。</p><h3 id="move-to-end"><a href="#move-to-end" class="headerlink" title="move_to_end()"></a>move_to_end()</h3><p>OrderdDict多了一个<code>move_to_end</code>函数，有两个参数，第一个参数是待移动的key，第二个参数表示移动到最后(True默认值)还是移动到开头(False)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ord.move_to_end(key, last=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>同理，如果key不存在，抛出KeyError错误。</p><h2 id="lib-defaultdict"><a href="#lib-defaultdict" class="headerlink" title="lib-defaultdict"></a>lib-defaultdict</h2><p>是dict的子类，但是提供了一个参数用于初始化字典的key对应的值</p><p>同样需要先引入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br></pre></td></tr></table></figure></p><p>结构如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaultdict(default_factory=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>使用实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">92</span>]: a = defaultdict(list)</span><br><span class="line">In [<span class="number">95</span>]: a[<span class="string">'a'</span>]</span><br><span class="line">Out[<span class="number">95</span>]: []</span><br></pre></td></tr></table></figure></p><p>上面定义了一个defaultdict实例a，并且参数是list，我们并没有定义a的key ‘a’，但是后面直接使用a[‘a’]并没有报错，而是直接输出了一个空的列表。也就是说如果默认情况下，使用一个不存在的key，defaultdict会创建这个key，并且赋初始值为<code>default_factory</code>。</p>]]></content>
      
      <categories>
          
          <category> PYTHON </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[hexo]-配置</title>
      <link href="/2018/04/26/hexo-config/"/>
      <url>/2018/04/26/hexo-config/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> TOOLS </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[linux]-vim</title>
      <link href="/2018/04/26/linux-vim/"/>
      <url>/2018/04/26/linux-vim/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> LINUX </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[Linux]-文件查看操作</title>
      <link href="/2018/04/26/linux-view-file/"/>
      <url>/2018/04/26/linux-view-file/</url>
      <content type="html"><![CDATA[<p>本文主要对Linux下查看文件的几个命令的常用方式进行了总结，没有进行详细解释，适合作为查阅，备忘。</p><a id="more"></a><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>一次显示整个文件，参数:</p><p>-n: 输出行号<br>-b: 输出行号，但是忽略空白行</p><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p>每次显示一屏内容</p><p>按键：<br>enter 下一行<br>space 下一屏<br>= 显示当前行号<br>:f 显示当前文件和行号<br>ctrl+b 上一屏(对应的ctrl+f下一屏)</p><p>参数：<br>+num 从num行开始显示<br>-num 每屏显示num行<br>+/pattern 从第一个匹配pattern的前两行开始显示</p><p>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ more +10 file</span><br><span class="line">$ more -10 file</span><br><span class="line">$ more +10 -10 file</span><br><span class="line">$ more +/<span class="built_in">test</span> -10 file</span><br></pre></td></tr></table></figure></p><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p>类似于<a href="#more">more</a>，但是less支持使用page down 和 page up进行翻页。<br>less 和 more 都支持v命令直接调用vim编辑器，都支持-s参数把多个连续的空行显示为一行。</p><p>按键：<br>enter 下一行<br>y 上一行<br>g 调到最开始<br>G 调到最末尾<br>n 显示下一个搜索的匹配<br>N 显示上一个搜索的匹配<br>m 输入以后会提示输入标记，比如输入a，那么当浏览到其它内容以后，想回到a这个标记点，输入’a就可以了</p><p>参数：<br>-i 文章内进行搜索的时候忽略大小写<br>-N 显示行号<br>-M 显示读取进度，显示内容类似：<code>iperft lines 19-48/1836 3%</code> 分别表示文件名iperft，当前屏幕显示的是19-48行，总共1836行</p><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>默认显示文件的前10行，-n num参数可以指定显示多少行，这个参数对<a href="#tail">tail</a>命令也适用。</p><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>默认显示文件的最后10行</p><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>可以进行字符匹配，-i 忽略大小写， -n 显示行号， -v 反向匹配</p><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ grep -i <span class="built_in">test</span> file</span><br><span class="line">$ grep -ni <span class="built_in">test</span> file</span><br><span class="line">$ ps -ef | grep firefox -v grep</span><br></pre></td></tr></table></figure><h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><p>计算byte，字数或者列数</p><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll | wc -l <span class="comment">#显示ll命令回显有多少行</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> LINUX </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[SQL]-sql基础</title>
      <link href="/2018/04/25/sql-basic/"/>
      <url>/2018/04/25/sql-basic/</url>
      <content type="html"><![CDATA[<p>本文主要介绍了sql(Structured Query Language)语句的基本使用，主要使用mysql进行操作。</p><a id="more"></a><p>参考链接:</p><ul><li><a href="http://www.w3school.com.cn/sql/" target="_blank" rel="noopener">http://www.w3school.com.cn/sql/</a></li></ul><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>数据库是数据的容器，在做任何有关数据的操作时，都需要创建一个数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] database_name;</span><br></pre></td></tr></table></figure><p>注意 <code>IF NOT EXISTS</code>语句是可选的，这句话的意思是如果在服务器已经有了和当前需要创建的数据库同名的数据库，就不创建。</p><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>mysql等数据库，都是需要用表来存放数据的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name(</span><br><span class="line">    column_list</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>举例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_table(</span><br><span class="line">    table_id <span class="built_in">INT</span> AUTO_INCREMENT, #设置一个列，取名叫table_id，数据类型为<span class="built_in">INT</span>，并且是自动增长的</span><br><span class="line">    title <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, #创建title列，数据类型为<span class="built_in">VARCHAR</span>类型，最长<span class="number">10</span>，并且不为空</span><br><span class="line">    create_date <span class="built_in">DATE</span>, #创建create_date列，数据类型为<span class="built_in">DATE</span>，可以为空</span><br><span class="line">    usercount <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>, #创建usercount列，设置默认值为<span class="number">0</span></span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>), #设置主键为<span class="keyword">id</span></span><br><span class="line">    <span class="keyword">UNIQUE</span> (title), #设置title必须唯一</span><br><span class="line">    <span class="keyword">CHECK</span> (usercount&gt;<span class="number">-1</span>), #设置usercount列的数据不能是负数</span><br><span class="line">    FOREGIN <span class="keyword">KEY</span> (another_id) <span class="keyword">REFERENCES</span> anoter_table(another_id), #设置another_id列，并且与anoter_table表的another_id关联</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>解释:</p><blockquote><p>主键的作用：确定了数据的唯一性，便于其它表的关联，配合索引提升数据查找性能<br>SQL约束：<code>NOT NULL</code>, <code>UNIQUE</code>, <code>PRIMARY KEY</code>, <code>FOREIGN KEY</code>, <code>DEFAULT</code>, <code>CHECK</code></p></blockquote><h3 id="SELECT语句"><a href="#SELECT语句" class="headerlink" title="SELECT语句"></a>SELECT语句</h3><p>基本语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><h3 id="WHERE语句"><a href="#WHERE语句" class="headerlink" title="WHERE语句"></a>WHERE语句</h3><p>基本语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> cloumn_name=<span class="string">'condition'</span>;</span><br></pre></td></tr></table></figure><h3 id="INSERT语句"><a href="#INSERT语句" class="headerlink" title="INSERT语句"></a>INSERT语句</h3><p>基本语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 指定列名插入</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name(column1, column2) <span class="keyword">VALUES</span> (value1, value2);</span><br><span class="line"></span><br><span class="line"># 指定列名插入多条数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name(column1, column2) <span class="keyword">VALUES</span> (value1, value2), (value11, value22);</span><br><span class="line"></span><br><span class="line"># 如果插入全部数据，可以不指定列名，注意自动增加的字段可以不写</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name <span class="keyword">VALUES</span> (value1, value2);</span><br><span class="line"></span><br><span class="line"># 不指定列名插入多条数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name <span class="keyword">VALUES</span> (value1, value2), (value11, value22);</span><br></pre></td></tr></table></figure><h3 id="UPDATE语句"><a href="#UPDATE语句" class="headerlink" title="UPDATE语句"></a>UPDATE语句</h3><p>基本语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> column1 = new_value1, column2 = new_value2 <span class="keyword">WHERE</span> condition;</span><br></pre></td></tr></table></figure><p>注意: SET后面是需要更新的列，指定多列，中间用英文的逗号分开，WHERE语句是可选的，如果没有这个语句，默认更新所有的行的数据。</p><h3 id="DELETE语句"><a href="#DELETE语句" class="headerlink" title="DELETE语句"></a>DELETE语句</h3><p>基本语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> condition;</span><br></pre></td></tr></table></figure><p>注意: 如果没有WHERE子句进行限制，默认删除所有的数据。</p>]]></content>
      
      <categories>
          
          <category> DATABASE </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/04/26/hello-world/"/>
      <url>/2017/04/26/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> MARKDOWN </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
