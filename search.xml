<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>[tool]-远程连接工具的使用</title>
      <link href="/2018/05/10/tool-remote/"/>
      <url>/2018/05/10/tool-remote/</url>
      <content type="html"><![CDATA[<p>本文主要记录了一些远程连接工具的使用，比如SSH Secure, xmanager, xshell, securecrt等工具。</p><a id="more"></a><h2 id="远程打开linux上的界面"><a href="#远程打开linux上的界面" class="headerlink" title="远程打开linux上的界面"></a>远程打开linux上的界面</h2><p>比如linux上的firefox，可以通过如下方式在本地进行浏览。</p><p><img src="/2018/05/10/tool-remote/open-linux-firefox.gif" alt="firefox"></p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[tool]-vsphere的使用</title>
      <link href="/2018/05/10/tool-vsphere/"/>
      <url>/2018/05/10/tool-vsphere/</url>
      <content type="html"><![CDATA[<p>本文主要记录了vSphere工具的使用。</p><a id="more"></a><h2 id="虚拟机上电启动"><a href="#虚拟机上电启动" class="headerlink" title="虚拟机上电启动"></a>虚拟机上电启动</h2><p>服务器在重新启动后，默认虚拟机是不会随着服务器自动启动，按照下面的配置，可以在服务器启动后，虚拟机也启动。</p><p><img src="/2018/05/10/tool-vsphere/virtual-startup.gif" alt="startup"></p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[mysql]-实例</title>
      <link href="/2018/05/09/db-mysql-demo/"/>
      <url>/2018/05/09/db-mysql-demo/</url>
      <content type="html"><![CDATA[<p>本文主要使用MySQL来进行SQL语句练习。首先会创建一个数据库<code>sqltest</code>，会涉及两张表，<code>tb_websites</code>和<code>tb_accesslog</code>，第一张表里面有<code>id name url country</code> 几个字段，分别表示ID 名称 URL地址 国家，第二张表里面有<code>id site_id accesscount date</code>几个字典，分别表示ID <code>tb_websites</code>的ID 日访问量 日期。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>创建数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> sqltest;</span><br></pre></td></tr></table></figure><p>创建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_websites (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="keyword">url</span> <span class="built_in">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  country <span class="built_in">VARCHAR</span>(<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">innoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tb_accesslog (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line">  site_id <span class="built_in">INT</span>,</span><br><span class="line">  accesscount <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">  <span class="built_in">date</span> <span class="built_in">DATE</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">innoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h2 id="INSERT"><a href="#INSERT" class="headerlink" title="INSERT"></a>INSERT</h2><p>表创建完成后，里面没有数据，我们通过INSERT插入数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tb_websites <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'百度'</span>, <span class="string">'http://www.baidu.com'</span>, <span class="string">'CN'</span>);</span><br></pre></td></tr></table></figure><h2 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h2><h3 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -hip -uuser -ppassword</span><br></pre></td></tr></table></figure><h3 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><h3 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use database_name;</span><br></pre></td></tr></table></figure><h3 id="显示表"><a href="#显示表" class="headerlink" title="显示表"></a>显示表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[linux]-常用命令</title>
      <link href="/2018/05/07/linux-common-cmd/"/>
      <url>/2018/05/07/linux-common-cmd/</url>
      <content type="html"><![CDATA[<p>本文收录了个人常用的linux命令，很基础的一些命令就没有列举了。</p><a id="more"></a><h2 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h2><p><img src="/2018/05/07/linux-common-cmd/ls.png" alt="ls"></p><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>用于匹配查找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep ISM_Base_0490 output.xml <span class="comment">#在output.xml文件中查找ISM_Base_0490</span></span><br></pre></td></tr></table></figure><p>-n: 打印所在行<br>-v: 反向匹配<br>-i: 忽略大小写<br>-A n: 显示匹配的前n行<br>-B n: 显示匹配的后n行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -A 5 -B 5 teststr</span><br></pre></td></tr></table></figure><h2 id="dh-df"><a href="#dh-df" class="headerlink" title="dh/df"></a>dh/df</h2><h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><h2 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h2>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[cassandra]-基本操作</title>
      <link href="/2018/05/04/db-cassandra/"/>
      <url>/2018/05/04/db-cassandra/</url>
      <content type="html"><![CDATA[<p>可视化工具可以使用DevCenter.</p><a id="more"></a>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[windows]-cmd</title>
      <link href="/2018/05/03/windows-cmd/"/>
      <url>/2018/05/03/windows-cmd/</url>
      <content type="html"><![CDATA[<h2 id="查看目录树"><a href="#查看目录树" class="headerlink" title="查看目录树"></a>查看目录树</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree /f</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[爬虫]-scrapy</title>
      <link href="/2018/05/03/spider-scrapy/"/>
      <url>/2018/05/03/spider-scrapy/</url>
      <content type="html"><![CDATA[<p>本文主要记录了python的scrapy爬虫框架的使用。本文使用python2.7版本。</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure><p>安装完成后，使用下面的命令创建项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject firstspider <span class="comment">#这里的firstspider是你的项目名</span></span><br></pre></td></tr></table></figure><p>生成的目录结构类似：</p><p><img src="/2018/05/03/spider-scrapy/spider-dir.png" alt="spider-dir"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://python.jobbole.com/86405/" target="_blank" rel="noopener">http://python.jobbole.com/86405/</a><br><a href="http://python.jobbole.com/89122/" target="_blank" rel="noopener">http://python.jobbole.com/89122/</a></p>]]></content>
      
      <categories>
          
          <category> spider </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[python]-lib-telnet</title>
      <link href="/2018/05/03/py-lib-telnet/"/>
      <url>/2018/05/03/py-lib-telnet/</url>
      <content type="html"><![CDATA[<p>本文记录了python通过telnet链接设备的是使用。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> telnetlib <span class="keyword">import</span> Telnet</span><br><span class="line"></span><br><span class="line">tel = Telnet(<span class="string">'your_ipaddr'</span>)</span><br><span class="line">tel.read_until(<span class="string">'expected str'</span>, timeout) <span class="comment">#这里返回读取到的回显</span></span><br><span class="line">tel.write(<span class="string">'something'</span> + self.cr)</span><br><span class="line">tel.expect([<span class="string">'es1'</span>, <span class="string">'es2'</span>, <span class="string">'\d+'</span>], timeout) <span class="comment">#这里第一个参数必须是列表，里面内容可以是正则表达式，返回3个元素的元组，最后一个是读取到的内容</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[python]-lib-时间处理</title>
      <link href="/2018/05/03/py-lib-time/"/>
      <url>/2018/05/03/py-lib-time/</url>
      <content type="html"><![CDATA[<p>本文主要记录了python处理时间的几个库的使用。</p><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><p>时间戳一般在python里面是表示从1970年1月1日开始按秒计算的时间偏移量，通过<code>time.gmtime(0)</code>可以查看。</p><h3 id="UTC"><a href="#UTC" class="headerlink" title="UTC"></a>UTC</h3><p>世界协调时间，标准时间，中国是UTC+8</p><h3 id="DST"><a href="#DST" class="headerlink" title="DST"></a>DST</h3><p>夏令时</p><h2 id="time"><a href="#time" class="headerlink" title="time"></a>time</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br></pre></td></tr></table></figure><h3 id="time-1"><a href="#time-1" class="headerlink" title="time"></a>time</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.time() <span class="comment">#返回类似1525322407.005这种格式</span></span><br></pre></td></tr></table></figure><h3 id="localtime"><a href="#localtime" class="headerlink" title="localtime"></a>localtime</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.localtime()</span><br></pre></td></tr></table></figure><p>返回类似如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.struct_time(tm_year=2018, tm_mon=5, tm_mday=3, tm_hour=12, tm_min=34, tm_sec=17, tm_wday=3, tm_yday=123, tm_isdst=0)</span><br></pre></td></tr></table></figure><p>返回的雷人分别表示 年 月 日 时 分 秒 一周的第几天(0表示周日) 一年中的第几天(从1开始) 是否是夏令时。</p><p>函数可以接收一个时间戳作为参数，返回对应的时间元组，默认是使用当前的时间戳作为参数。</p><h3 id="gmtime"><a href="#gmtime" class="headerlink" title="gmtime"></a>gmtime</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.gmtime()</span><br></pre></td></tr></table></figure><p>返回格式类似于<a href="#localtime"><code>localtime</code></a>，只不过<code>gmtime</code>返回的是UTC标准时间，<code>localtime</code>返回的是当前本地时间。<br>如果是中国的话，<code>gmtime</code>比<code>localtime</code>获取到的时间会小8个小时。</p><h3 id="strftime"><a href="#strftime" class="headerlink" title="strftime"></a>strftime</h3><p>格式化时间，第一个参数是格式化的格式，第二个参数是时间元组，比如<code>localtime</code>返回的时间，默认是<code>localtime</code>的返回值。</p><p>其中 %Y %m %d %H %M %S 分别表示年 月 日 时 分 秒</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>) <span class="comment">#返回'2018-05-03 14:01:57'</span></span><br></pre></td></tr></table></figure><h3 id="strptime"><a href="#strptime" class="headerlink" title="strptime"></a>strptime</h3><p>这个就是<code>strftime</code>的反向操作。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.strptime(<span class="string">'2018-05-03 14:01:57'</span>, <span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br></pre></td></tr></table></figure><p>返回内容如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">time.struct_time(tm_year=2018, tm_mon=5, tm_mday=3, tm_hour=14, tm_min=1, tm_sec=57, tm_wday=3, tm_yday=123, tm_isdst=-1)</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://docs.python.org/2/library/time.html" target="_blank" rel="noopener">https://docs.python.org/2/library/time.html</a><br><a href="https://docs.python.org/2/library/datetime.html" target="_blank" rel="noopener">https://docs.python.org/2/library/datetime.html</a><br><a href="https://www.cnblogs.com/renpingsheng/p/6965044.html" target="_blank" rel="noopener">https://www.cnblogs.com/renpingsheng/p/6965044.html</a><br><a href="http://www.jb51.net/article/49326.htm" target="_blank" rel="noopener">http://www.jb51.net/article/49326.htm</a><br><a href="https://blog.csdn.net/tigerking1017/article/details/51332220" target="_blank" rel="noopener">https://blog.csdn.net/tigerking1017/article/details/51332220</a><br><a href="https://blog.csdn.net/u012175089/article/details/62044335" target="_blank" rel="noopener">https://blog.csdn.net/u012175089/article/details/62044335</a></p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[python]-字符串操作</title>
      <link href="/2018/05/02/py-lib-str/"/>
      <url>/2018/05/02/py-lib-str/</url>
      <content type="html"><![CDATA[<p>本文主要讲解一下python字符串的相关操作，包括string库的一些实用。</p><a id="more"></a><h2 id="常量字符串的操作"><a href="#常量字符串的操作" class="headerlink" title="常量字符串的操作"></a>常量字符串的操作</h2><p>常量字符串，就是我们定义的一个字符串，它们是一个常量，也就是不可改变的。</p><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var = <span class="string">"test_str"</span></span><br></pre></td></tr></table></figure><p>这里把常量字符串<code>test_str</code>赋值给了变量<code>var</code>，其中<code>test_str</code>这是一个不可改变的，<code>var</code>只是一个变量，可以被重新赋值。</p><h3 id="strip"><a href="#strip" class="headerlink" title="strip"></a>strip</h3><p><a href="https://docs.python.org/2/library/stdtypes.html#str.strip" target="_blank" rel="noopener">https://docs.python.org/2/library/stdtypes.html#str.strip</a><br><a href="https://docs.python.org/2/library/string.html#string.strip" target="_blank" rel="noopener">https://docs.python.org/2/library/string.html#string.strip</a></p><p>涉及到3个函数，<code>strip</code>, <code>lstrip</code>, <code>rstrip</code>，同理string库里面也有这3个函数，<code>strip</code>是复制当前字符串，把当前字符串的前后的特定的字符给去掉后返回一个新的字符串，默认去掉的字符是空格。<code>lstrip</code>是去掉左边特定的字符，<code>rstrip</code>是去掉右边的特定字符。<br>需要去掉的字符可以是多个，当遇到第一个不是去掉的字符的时候停止，比如’testxxxtest’要去掉里面的”test”几个字符，<code>strip</code>函数会匹配第一个t发现在去掉的字符中，e s t几个也在，所以都去掉，遇到了x不在test中则停止。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">" test "</span>.strip() <span class="comment">#这里返回test</span></span><br><span class="line"><span class="string">"test"</span>.strip(<span class="string">'t'</span>) <span class="comment">#这里返回es</span></span><br><span class="line"><span class="string">"testxxxtest"</span>.strip(<span class="string">"test"</span>) <span class="comment">#这里返回xxx</span></span><br><span class="line"><span class="string">"mississippi"</span>.rstrip(<span class="string">"ipz"</span>) <span class="comment">#返回mississ</span></span><br><span class="line"><span class="string">"www.example.com"</span>.lstrip(<span class="string">"cmowz."</span>) <span class="comment">#返回example.com</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">string.strip(<span class="string">" test "</span>) <span class="comment">#返回test，其它几个使用类似</span></span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p><a href="https://docs.python.org/2/library/stdtypes.html#str.split" target="_blank" rel="noopener">https://docs.python.org/2/library/stdtypes.html#str.split</a><br><a href="https://docs.python.org/2/library/string.html#string.split" target="_blank" rel="noopener">https://docs.python.org/2/library/string.html#string.split</a></p><p>这个函数是用于分割字符串，按照指定的字符把字符串分割，返回一个分割后的列表，同理也有<code>lsplit</code>和<code>rsplit</code>函数，同理string库里面也有相同的函数可以操作。</p><p>默认的分隔符是空格。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"1 2 3 4"</span>.split() <span class="comment">#返回['1', '2', '3', '4']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">string.split(<span class="string">"1 2 3 4"</span>) <span class="comment">#返回['1', '2', '3', '4']</span></span><br></pre></td></tr></table></figure><h2 id="字符串的格式化"><a href="#字符串的格式化" class="headerlink" title="字符串的格式化"></a>字符串的格式化</h2><h3 id="s"><a href="#s" class="headerlink" title="%s"></a>%s</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">string=<span class="string">"hello"</span> </span><br><span class="line">   </span><br><span class="line"><span class="comment">#%s打印时结果是hello  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"string=%s"</span> % string   <span class="comment"># output: string=hello  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%2s意思是字符串长度为2，当原字符串的长度超过2时，按原长度打印，所以%2s的打印结果还是hello  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"string=%2s"</span> % string   <span class="comment"># output: string=hello  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%7s意思是字符串长度为7，当原字符串的长度小于7时，在原字符串左侧补空格，  </span></span><br><span class="line"><span class="comment">#所以%7s的打印结果是 hello  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"string=%7s"</span> % string   <span class="comment"># output: string= hello  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%-7s意思是字符串长度为7，当原字符串的长度小于7时，在原字符串右侧补空格，  </span></span><br><span class="line"><span class="comment">#所以%-7s的打印结果是 hello  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"string=%-7s!"</span> % string   <span class="comment"># output: string=hello !  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%.2s意思是截取字符串的前2个字符，所以%.2s的打印结果是he  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"string=%.2s"</span> % string  <span class="comment"># output: string=he  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%.7s意思是截取字符串的前7个字符，当原字符串长度小于7时，即是字符串本身，  </span></span><br><span class="line"><span class="comment">#所以%.7s的打印结果是hello  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"string=%.7s"</span> % string  <span class="comment"># output: string=hello  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%a.bs这种格式是上面两种格式的综合，首先根据小数点后面的数b截取字符串，  </span></span><br><span class="line"><span class="comment">#当截取的字符串长度小于a时，还需要在其左侧补空格  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"string=%7.2s"</span> % string  <span class="comment"># output: string=   he  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"string=%2.7s"</span> % string  <span class="comment"># output: string=hello  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"string=%10.7s"</span> % string <span class="comment"># output: string=   hello  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#还可以用%*.*s来表示精度，两个*的值分别在后面小括号的前两位数值指定  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"string=%*.*s"</span> % (<span class="number">7</span>,<span class="number">2</span>,string)   <span class="comment"># output: string=   he</span></span><br></pre></td></tr></table></figure><h3 id="d"><a href="#d" class="headerlink" title="%d"></a>%d</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">num=<span class="number">14</span> </span><br><span class="line">   </span><br><span class="line"><span class="comment">#%d打印时结果是14  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"num=%d"</span> % num      <span class="comment"># output: num=14  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%1d意思是打印结果为1位整数，当整数的位数超过1位时，按整数原值打印，所以%1d的打印结果还是14  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"num=%1d"</span> % num      <span class="comment"># output: num=14  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%3d意思是打印结果为3位整数，当整数的位数不够3位时，在整数左侧补空格，所以%3d的打印结果是 14  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"num=%3d"</span> % num      <span class="comment"># output: num= 14  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%-3d意思是打印结果为3位整数，当整数的位数不够3位时，在整数右侧补空格，所以%3d的打印结果是14_  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"num=%-3d"</span> % num     <span class="comment"># output: num=14_  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%05d意思是打印结果为5位整数，当整数的位数不够5位时，在整数左侧补0，所以%05d的打印结果是00014  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"num=%05d"</span> % num     <span class="comment"># output: num=00014  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%.3d小数点后面的3意思是打印结果为3位整数，  </span></span><br><span class="line"><span class="comment">#当整数的位数不够3位时，在整数左侧补0，所以%.3d的打印结果是014  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"num=%.3d"</span> % num     <span class="comment"># output: num=014  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%.0003d小数点后面的0003和3一样，都表示3，意思是打印结果为3位整数，  </span></span><br><span class="line"><span class="comment">#当整数的位数不够3位时，在整数左侧补0，所以%.3d的打印结果还是014  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"num=%.0003d"</span> % num    <span class="comment"># output: num=014  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%5.3d是两种补齐方式的综合，当整数的位数不够3时，先在左侧补0，还是不够5位时，再在左侧补空格，  </span></span><br><span class="line"><span class="comment">#规则就是补0优先，最终的长度选数值较大的那个，所以%5.3d的打印结果还是 014  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"num=%5.3d"</span> % num     <span class="comment"># output: num= 014  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%05.3d是两种补齐方式的综合，当整数的位数不够3时，先在左侧补0，还是不够5位时，  </span></span><br><span class="line"><span class="comment">#由于是05，再在左侧补0，最终的长度选数值较大的那个，所以%05.3d的打印结果还是00014  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"num=%05.3d"</span> % num    <span class="comment"># output: num=00014  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#还可以用%*.*d来表示精度，两个*的值分别在后面小括号的前两位数值指定  </span></span><br><span class="line"><span class="comment">#如下，不过这种方式04就失去补0的功能，只能补空格，只有小数点后面的3才能补0  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"num=%*.*d"</span> % (<span class="number">04</span>,<span class="number">3</span>,num) <span class="comment"># output: num= 014</span></span><br></pre></td></tr></table></figure><h3 id="f"><a href="#f" class="headerlink" title="%f"></a>%f</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math  </span><br><span class="line">   </span><br><span class="line"><span class="comment">#%a.bf，a表示浮点数的打印长度，b表示浮点数小数点后面的精度  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#只是%f时表示原值，默认是小数点后5位数  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"PI=%f"</span> % math.pi       <span class="comment"># output: PI=3.141593  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#只是%9f时，表示打印长度9位数，小数点也占一位，不够左侧补空格  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"PI=%9f"</span> % math.pi      <span class="comment"># output: PI=_3.141593  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#只有.没有后面的数字时，表示去掉小数输出整数，03表示不够3位数左侧补0  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"PI=%03.f"</span> % math.pi     <span class="comment"># output: PI=003  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%6.3f表示小数点后面精确到3位，总长度6位数，包括小数点，不够左侧补空格  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"PI=%6.3f"</span> % math.pi     <span class="comment"># output: PI=_3.142  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#%-6.3f表示小数点后面精确到3位，总长度6位数，包括小数点，不够右侧补空格  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"PI=%-6.3f"</span> % math.pi     <span class="comment"># output: PI=3.142_  </span></span><br><span class="line">   </span><br><span class="line"><span class="comment">#还可以用%*.*f来表示精度，两个*的值分别在后面小括号的前两位数值指定  </span></span><br><span class="line"><span class="comment">#如下，不过这种方式06就失去补0的功能，只能补空格  </span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"PI=%*.*f"</span> % (<span class="number">06</span>,<span class="number">3</span>,math.pi)  <span class="comment"># output: PI=_3.142</span></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="http://www.jb51.net/article/134290.htm" target="_blank" rel="noopener">http://www.jb51.net/article/134290.htm</a></p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[python]-with as 语句</title>
      <link href="/2018/05/02/python-withas/"/>
      <url>/2018/05/02/python-withas/</url>
      <content type="html"><![CDATA[<p>本文主要讲解了 with as 语句的使用，就是python里面上下文管理器的一种概念(context manager)。</p><a id="more"></a><p>官方链接：<br><a href="https://docs.python.org/2/reference/datamodel.html#context-managers" target="_blank" rel="noopener">https://docs.python.org/2/reference/datamodel.html#context-managers</a><br><a href="https://docs.python.org/2/reference/compound_stmts.html#the-with-statement" target="_blank" rel="noopener">https://docs.python.org/2/reference/compound_stmts.html#the-with-statement</a></p><p>我们知道平时打开文件进行操作使用如下语句，可以在任何时候都关闭掉打开的文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.do_something()</span><br></pre></td></tr></table></figure><p>其实我们也可以创建自己的上下文管理器来完成相应的动作，在做完或者中间有异常的情况下，我们设定的代码都一定会执行。<br>我们只需要定义一个类，然后创建两个函数，格式如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">testwith</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span> <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_value, traceback)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'exit'</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">print</span> <span class="string">'fun'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> testwith() <span class="keyword">as</span> p:</span><br><span class="line">    p.fun()</span><br></pre></td></tr></table></figure><p>只要定义了<code>__enter__</code>和<code>__exit__</code>两个函数，那么就可以使用<code>with as</code>语句了，执行顺序如下：</p><ol><li>先执行<code>__init__</code></li><li>执行<code>__enter__</code>，返回的对象赋值给<code>with as</code>语句as后面的变量</li><li>执行<code>with as</code>的代码块(也就是执行p.fun())</li><li>执行<code>__enter__</code>，这个函数必须是4个参数，<code>self</code>是固定的，<code>exc_type</code>是异常类型，<code>exc_value</code>是异常实例对象，<code>traceback</code>是异常跟踪对象，如果没有异常发生，后面三个参数都是<code>None</code>。</li></ol><p><strong>注意</strong>: 如果在未执行代码块(也就是p.fun())以前发生了任何异常，是不会执行<code>__exit__</code>的，也就是说<code>__init__</code>或者<code>__enter__</code>里面发生了异常，是不会执行到<code>__exit__</code>里面的</p><p><strong>注意</strong>: 默认情况下<code>__exit__</code>返回的是<code>None</code>，这个时候，异常是会继续抛出的，如果想出现异常不抛出，这个函数需要显示的返回真值，比如<code>True</code>。</p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[python]-lib-ConfigParser</title>
      <link href="/2018/05/02/py-lib-configparser/"/>
      <url>/2018/05/02/py-lib-configparser/</url>
      <content type="html"><![CDATA[<p>本文以python2.7版本为例进行ConfigParser基础进行解析，ConfigParser是python用于解析ini文件的库。</p><a id="more"></a><p>官方文档：<a href="https://docs.python.org/2/library/configparser.html" target="_blank" rel="noopener">https://docs.python.org/2/library/configparser.html</a></p><p>下面先看一下ini文件的格式，大致如下：<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[SECTION1]</span></span><br><span class="line"><span class="attr">OPTION1</span> = VALUE1</span><br><span class="line"><span class="attr">OPTION2</span> = VALUE2</span><br><span class="line"></span><br><span class="line"><span class="section">[SECTION2]</span></span><br><span class="line"><span class="attr">OPTION3</span> = VALUE3</span><br><span class="line"><span class="attr">OPTION4</span> = VALUE4</span><br><span class="line"></span><br><span class="line"><span class="section">[DEFAULT]</span></span><br><span class="line"><span class="attr">OP</span> = DEFAULT1 #如果其它section没有提供这个option，默认使用这里的值</span><br></pre></td></tr></table></figure></p><h2 id="ConfigParser"><a href="#ConfigParser" class="headerlink" title="ConfigParser"></a>ConfigParser</h2><p>ConfigParser有几个类，下面先讲解它的ConfigParser这个类，首先引入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ConfigParser <span class="keyword">import</span> ConfigParser <span class="keyword">as</span> cp</span><br></pre></td></tr></table></figure><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><p>然后实例化这个类并且读取init文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mycp = cp()</span><br><span class="line">cp.read(<span class="string">'your_ini_file.ini'</span>)</span><br></pre></td></tr></table></figure><h3 id="has-section"><a href="#has-section" class="headerlink" title="has_section"></a><code>has_section</code></h3><p>然后就可以使用如下的函数进行各种操作了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mycp.has_section(<span class="string">'section'</span>) <span class="comment">#判断某个section是否在ini文件中</span></span><br></pre></td></tr></table></figure><h3 id="has-option"><a href="#has-option" class="headerlink" title="has_option"></a><code>has_option</code></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mycp.has_option(<span class="string">'section'</span>, <span class="string">'option'</span>) <span class="comment">#判断在section中是否有某个option</span></span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get"></a>get</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mycp.get(<span class="string">'section'</span>, <span class="string">'option'</span>) <span class="comment">#返回section下的option的值</span></span><br></pre></td></tr></table></figure><p>上面的<code>get</code>函数返回的是字符串，还有<code>getinit</code>, <code>getfloat</code>等可以返回整形和浮点型数据。</p><h3 id="sections"><a href="#sections" class="headerlink" title="sections"></a>sections</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mycp.sections() <span class="comment">#返回一个列表，包含ini文件的所有section，不包含default内容。</span></span><br></pre></td></tr></table></figure><h3 id="items"><a href="#items" class="headerlink" title="items"></a>items</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mycp.items(<span class="string">'section'</span>) <span class="comment">#返回一个列表，每个元素是一个包含两个元素的元组</span></span><br><span class="line"><span class="comment">#元组第一个元素是option内容，第二个是值，会获取default的内容。</span></span><br></pre></td></tr></table></figure><h3 id="重复的情况"><a href="#重复的情况" class="headerlink" title="重复的情况"></a>重复的情况</h3><p><strong>注意</strong>：如果有section的内容相同，取最后一个section里面的内容，如果section里面有option相同，取最后一个option的值。</p><h3 id="读取的值大小写问题"><a href="#读取的值大小写问题" class="headerlink" title="读取的值大小写问题"></a>读取的值大小写问题</h3><p>通过get等读取出来的值默认会被转换为小写，可以通过下面的方式屏蔽这个内容。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YouClassName</span><span class="params">(ConfigParser)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">optionxform</span><span class="params">(self, optionstr)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> optionstr</span><br></pre></td></tr></table></figure><p>通过继承ConfigParser并且重写optionxform函数，返回原始读取的内容。</p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[python]-命令行</title>
      <link href="/2018/05/02/py-cmd/"/>
      <url>/2018/05/02/py-cmd/</url>
      <content type="html"><![CDATA[<p>本文主要备注一些python好用的命令行。</p><a id="more"></a><h2 id="编译py文件"><a href="#编译py文件" class="headerlink" title="编译py文件"></a>编译py文件</h2><p>当有一个py文件不能直接运行，但是需要查看语法等是否有误，可以使用如下命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">py -m py_compile xx.py</span><br></pre></td></tr></table></figure><p>如果没有报错，不会有回显，并且会在xx.py对应目录下生成xx.pyc文件，如果有错，类似下面的回显：</p><p><img src="/2018/05/02/py-cmd/cmd_error1.png" alt="cmd_error1"></p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[hexo]-使用hexo+github搭建blog</title>
      <link href="/2018/04/28/tool-hexo-config/"/>
      <url>/2018/04/28/tool-hexo-config/</url>
      <content type="html"><![CDATA[<p>本文是在windows10下进行的配置。<br><a id="more"></a></p><p>参考链接：</p><ol><li><a href="https://www.cnblogs.com/fengxiongZz/p/7707219.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengxiongZz/p/7707219.html</a></li><li><a href="https://www.jianshu.com/p/beb8d611340a" target="_blank" rel="noopener">https://www.jianshu.com/p/beb8d611340a</a></li></ol><h2 id="node-js安装"><a href="#node-js安装" class="headerlink" title="node.js安装"></a>node.js安装</h2><p>下载好node.js后安装完成后，输入如下命令表示成功：</p><p><img src="/2018/04/28/tool-hexo-config/nodejs.png" alt="nodejs"></p><h2 id="git安装"><a href="#git安装" class="headerlink" title="git安装"></a>git安装</h2><p>下载好<a href="https://git-scm.com/" target="_blank" rel="noopener">git</a>，安装完成后，输入如下命令表示成功：</p><p><img src="/2018/04/28/tool-hexo-config/git.png" alt="git"></p><p>如果命令失败，需要把git安装目录下的bin目录加入到环境变量里面，比如我的是：”c:/Program Files/Git/bin”，这个目录下有如下几个文件</p><p><img src="/2018/04/28/tool-hexo-config/git-bin.png" alt="git"></p><h2 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h2><p>进入<a href="https://github.com/" target="_blank" rel="noopener">github</a>注册一个账号，并且创建一个repository，注意名字必须是username.github.io格式，username是你注册的用户名。</p><p><img src="/2018/04/28/tool-hexo-config/github-repository.png" alt="gitbug"></p><p>可以通过<a href="https://username.github.io/的方式访问你的首页了。" target="_blank" rel="noopener">https://username.github.io/的方式访问你的首页了。</a></p><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>在任何适合的地方通过下面的命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><p>输入下面的命令，表示安装成功：</p><p><img src="/2018/04/28/tool-hexo-config/hexo-version.png" alt="hexo-version"></p><p>然后使用下面命令初始化hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>使用下面的命令安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>使用下面的命令生成页面</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>使用下面的命令启动服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img src="/2018/04/28/tool-hexo-config/hexo-server.png" alt="hexo-server"></p><p>根据提示访问这个网页，如果打不开，使用下面的命令修改端口号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p 5000</span><br></pre></td></tr></table></figure><p>当然你可以启用debug信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s -p 5000 --debug</span><br></pre></td></tr></table></figure><p>有时候发现浏览器更新不及时，使用下面的命令清理缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure><p>打开页面后出现下面的界面表示配置成功</p><p><img src="/2018/04/28/tool-hexo-config/hexo-succ.png" alt="hexo-succ"></p><h2 id="hexo与github关联"><a href="#hexo与github关联" class="headerlink" title="hexo与github关联"></a>hexo与github关联</h2><p>至于github上的权限等配置，这里不讲诉，本文只说明hexo与github的关联配置信息。</p><p>在我们刚刚操作的目录下有一个<code>_config.yml</code>文件，请在最后添加如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">    repository: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">      branch: master</span><br></pre></td></tr></table></figure><p>注意修改yourname为你自己的username</p><p>在发布以前需要安装下面的插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>安装好以后使用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>完成后，通过yourname.github.io就可以访问你的网页了。</p><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n name</span><br></pre></td></tr></table></figure><p>其中name替换成你想要的名字，会在<code>source\_posts</code>下生成你新建的文件，默认是md格式的，可以打开这个文件按照md的格式进行编写文章了。</p><p>如果需要图片支持，需要安装下面的插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>以后使用hexo n命令的时候，会在文章<code>source\_posts</code>这里生成和你文件名对应的目录，文章里面使用md语法<code>![comt](name\xx.png)</code>的格式插入图片了。</p><h2 id="hexo配置文件"><a href="#hexo配置文件" class="headerlink" title="hexo配置文件"></a>hexo配置文件</h2><h3 id="根目录-config-yml配置"><a href="#根目录-config-yml配置" class="headerlink" title="根目录_config.yml配置"></a>根目录<code>_config.yml</code>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">title: Title</span><br><span class="line">subtitle:</span><br><span class="line">description:</span><br><span class="line">keywords:</span><br><span class="line">author:</span><br><span class="line">language: zh-CN <span class="comment">#语言，这个在theme\languages目录下的对应</span></span><br><span class="line">timezone: Asia/Shanghai <span class="comment">#时间</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">category_map:</span><br><span class="line">  PYTHON: python</span><br><span class="line">  ROBOTFRAMEWORK: robotframework</span><br><span class="line">  LINUX: linux</span><br><span class="line">  ENGLISH: english</span><br><span class="line">  DATABASE: database</span><br><span class="line">  TOOLS: tools</span><br><span class="line">  MARKDOWN: markdown</span><br><span class="line">  OTHER: other</span><br></pre></td></tr></table></figure><p>这里是每个文章的categories字段，生成对应的url，默认生成的是categories字段，如果这里面有中文，url里面也会包含中文，这里就可以对它进行映射，使url里面无中文。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: cactus <span class="comment">#配置主题，和theme下面的名字一样</span></span><br></pre></td></tr></table></figure><h3 id="theme下-config-yml配置"><a href="#theme下-config-yml配置" class="headerlink" title="theme下_config.yml配置"></a>theme下<code>_config.yml</code>配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nav:</span><br><span class="line">  home: /</span><br><span class="line">  python: /categories/python</span><br><span class="line">  robotframework: /categories/robotframework</span><br><span class="line">  linux: categories/linux</span><br></pre></td></tr></table></figure><p>这里主要是对导航栏进行配置，注意我的主题是cactus，每个主题的配置有所不一样。</p><h3 id="文章里面的配置"><a href="#文章里面的配置" class="headerlink" title="文章里面的配置"></a>文章里面的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: <span class="string">'[redis]-基本操作'</span> <span class="comment">#文章标题，可以和文件名不一样</span></span><br><span class="line">date: 2018-04-27 19:07:35 <span class="comment">#创建时间</span></span><br><span class="line">tags: <span class="comment">#tag</span></span><br><span class="line">categories: DATABASE <span class="comment"># 这里就是分类，可以使用[a, b]方式，表示多类</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt; <span class="comment">#有的主题会显示文章的全部内容，这里可以进行区分，后面的内容就不会默认显示在首页了。</span></span><br></pre></td></tr></table></figure><h2 id="在其它机器写文章"><a href="#在其它机器写文章" class="headerlink" title="在其它机器写文章"></a>在其它机器写文章</h2><p>我们现在所有的文件都是在当前机器上进行的，怎么换到其它机器上写文章呢。</p><p>我们在任意一个地方使用下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/yourname/hexo-test.github.io.git</span><br></pre></td></tr></table></figure><p>注意替换相应的内容，克隆我们的服务器文件，<br>然后删除里面的所有内容，注意如果你开启了查看隐藏文件的功能，不要把<code>.git</code>这个文件删除<br>然后使用下面的命令创建一个分支，我们取名叫hexo，这个名字按照自己喜好命名：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b hexo</span><br></pre></td></tr></table></figure><p>然后把你自己写文章的目录下的所有内容拷贝过来。</p><p>分别使用如下的命令进行提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add --all</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">"Create new branch(hexo)."</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push --<span class="built_in">set</span>-upstream origin hexo</span><br></pre></td></tr></table></figure><p>这时候我们的github上就会多一个hexo分支，以后其它机器就可以通过下面的命令进行克隆代码，到其它机器写文章了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b hexo your_git_url</span><br></pre></td></tr></table></figure><p>注意以后写文章，提交到git，尽量使用下面的命令进行提交</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin hexo</span><br></pre></td></tr></table></figure><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>本文以NexT为主题，进入的你站点目录下，使用命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>进行安装，然后修改站点的config文件，修改：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>以后的配置都是在这个主题下进行配置。</p><h2 id="评论功能增加"><a href="#评论功能增加" class="headerlink" title="评论功能增加"></a>评论功能增加</h2>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[windows]-关闭win10自动更新</title>
      <link href="/2018/04/28/windows-close-auto-update/"/>
      <url>/2018/04/28/windows-close-auto-update/</url>
      <content type="html"><![CDATA[<p>windows10自动更新后，会重新电脑，按照下面方式关闭自动更新。<br><a id="more"></a><br><img src="/2018/04/28/windows-close-auto-update/close1.png" alt="close"><br><img src="/2018/04/28/windows-close-auto-update/close2.png" alt="close"></p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[redis]-基本操作</title>
      <link href="/2018/04/27/db-redis-basic/"/>
      <url>/2018/04/27/db-redis-basic/</url>
      <content type="html"><![CDATA[<p>Redis是一个开源的使用ANSI C语言编写、支持网络、可基于内存亦可持久化的日志型、Key-Value数据库。</p><a id="more"></a><p>桌面可视化工具可以使用 Redis Desktop Manager进行操作。</p><p>redis默认有db0 - db15 一共16个数据库。</p><p><img src="/2018/04/27/db-redis-basic/count.png" alt="count"></p><h2 id="hash类型"><a href="#hash类型" class="headerlink" title="hash类型"></a>hash类型</h2><p><img src="/2018/04/27/db-redis-basic/hash.png" alt="count"></p><h2 id="list类型"><a href="#list类型" class="headerlink" title="list类型"></a>list类型</h2><p><img src="/2018/04/27/db-redis-basic/list.png" alt="count"></p><h2 id="str类型"><a href="#str类型" class="headerlink" title="str类型"></a>str类型</h2><p><img src="/2018/04/27/db-redis-basic/str.png" alt="count"></p><h2 id="set类型"><a href="#set类型" class="headerlink" title="set类型"></a>set类型</h2><p>还有zset类型</p><h2 id="命令行操作"><a href="#命令行操作" class="headerlink" title="命令行操作"></a>命令行操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select 4 <span class="comment">#选择db4这个数据库 select 0选择的就是db0这个数据库</span></span><br><span class="line"><span class="built_in">set</span> key value <span class="comment">#设置了key为字符串的值value</span></span><br><span class="line">keys * <span class="comment">#查看所有的key</span></span><br><span class="line">hmset mainkey name testname value testvalue <span class="comment">#设置了一个hash，key是mainkey，value里面是name:testname, value:testvalue</span></span><br><span class="line">hgetall mainkey <span class="comment">#返回mainkey对应的值</span></span><br><span class="line">lpush testlist v1 <span class="comment">#key是testlist，值是列表，增加了一个值v1</span></span><br><span class="line">lrange testlist 1 10 <span class="comment">#获取testlist的1-10之间的值</span></span><br></pre></td></tr></table></figure><h2 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h2><p><img src="/2018/04/27/db-redis-basic/namespace.png" alt="namespace"></p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[python]-lib-virtualenv</title>
      <link href="/2018/04/27/py-virtualenv/"/>
      <url>/2018/04/27/py-virtualenv/</url>
      <content type="html"><![CDATA[<p>现在python有python2和python3两个版本，在windows上支持同时安装这两个版本的解释器，那么如何快速切换我们的开发环境呢。</p><a id="more"></a><p>首先如果只是作为调试，我们可以使用py -2和py -3命令来进入python的版本。</p><p><img src="/2018/04/27/py-virtualenv/py2-py3-console.png" alt="py2-py3-console"></p><p>同理，pip也支持：</p><p><img src="/2018/04/27/py-virtualenv/pip-console.png" alt="pip-console"></p><p>下面说一下virtualenv这个工具的使用，看下面的实例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">D:\Program Files&gt;virtualenv -p &quot;D:\Program Files\Python3\python.exe&quot; py3</span><br></pre></td></tr></table></figure><p>机器上安装了py2，在c:\python27下面，也安装了py3，在d:\program files\python3下面</p><p>现在使用上面的命令，会在在d:\program files\下面生成一个py3的文件夹，-p参数指定了这个环境的解释器版本</p><p>里面内容类似：</p><p><img src="/2018/04/27/py-virtualenv/py3-virtual.png" alt="py3-virtual"></p><p>我们进入scripts目录下执行active.bat：</p><p><img src="/2018/04/27/py-virtualenv/py3-active.png" alt="py3-active"></p><p>可以看见直接使用的是python命令，并且进入了python3的环境。注意上面的实际配置路径需要根据你自己机器上的路径配置。</p><p>virtualenv工具的作用就是创建一个独立的python开发环境，这里面的所有环境都是独立的，不会影响你原来的环境等信息(当然可以认为的修改)。</p><p>我们来看一下pip的使用：<br><img src="/2018/04/27/py-virtualenv/pip-virtual1.png" alt="pip-virtual"><br><img src="/2018/04/27/py-virtualenv/pip-virtual2.png" alt="pip-virtual"><br><img src="/2018/04/27/py-virtualenv/pip-virtual3.png" alt="pip-virtual"><br><img src="/2018/04/27/py-virtualenv/pip-virtual4.png" alt="pip-virtual"></p><p>红色区域1：在虚拟环境下进入python，引入一个click库，由于没有安装，所以引入失败<br>红色区域2：我们在虚拟环境下使用pip install click安装了click这个库，再次引入，成功了<br>红色区域3：调用deactive.bat退出当前的虚拟环境<br>红色区域4：进入系统的python3,引入click，引入失败，因为虚拟环境没有改变我们的外部环境</p><p>virtualenv还有很多的参数，通过：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">virtualenv -h</span><br></pre></td></tr></table></figure></p><p>可以查看帮助信息</p><p>备注：<br>py.exe 可以在c:/Windows下找到<br>virtualenv.exe 可以在c:/Python27/Scripts下找到，当然根据你实际安装环境来决定位置</p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[mysql]-mysql学习环境搭建</title>
      <link href="/2018/04/26/db-mysql-config/"/>
      <url>/2018/04/26/db-mysql-config/</url>
      <content type="html"><![CDATA[<p>本文主要介绍了学习sql语句的环境配置，主要使用windows+xampp进行一键环境搭建，用于学习sql基本语句已经完全够用。</p><a id="more"></a><h2 id="xampp的配置"><a href="#xampp的配置" class="headerlink" title="xampp的配置"></a>xampp的配置</h2><p><a href="!https://www.apachefriends.org/zh_cn/index.html">xampp</a>是一个强大的建站集成软件包，里面包含了Apache, Mysql, PHP等常用的环境。而且支持Windows, Linux, Mac OS等环境，语言也支持中文。本文以windows为例进行配置。</p><p>下载好xampp以后，全部默认点击下一步就可以安装完成，默认一般安装在c:\xampp这个位置，桌面也会生成xampp的快捷方式，打开后类似如下界面：</p><p><img src="/2018/04/26/db-mysql-config/xampp-startup.png" alt="xampp-startup"></p><p>分别把Apache和MySQL启动起来，其它的不在本文讨论范围，启动后类似界面如下：</p><p><img src="/2018/04/26/db-mysql-config/xampp-mysql.png" alt="xampp-mysql"></p><p>点击MySQL的Admin，将会打开一个浏览器窗口，类似如下界面：</p><p><img src="/2018/04/26/db-mysql-config/xampp-phpmyadmin.png" alt="xampp-phpmyadmin"></p><p>其中红色框内的几个区域说明如下：<br>区域1：表示当前mysql数据库里面有哪些数据库<br>区域2：表示当前选中的数据库sks下面有哪些数据表<br>区域3和区域4：表示对选中的数据库进行SQL语句，也就是以后使用SQL语句进行增删查改操作的地方<br>区域5：最后执行</p><p>OK,经过上面的配置，基本的使用mysql来学习SQL语句已经可以满足要求了。</p>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[robotframework]-指导说明</title>
      <link href="/2018/04/26/rf-user-guide/"/>
      <url>/2018/04/26/rf-user-guide/</url>
      <content type="html"><![CDATA[<p>robotframework是一个自动化测试框架。</p><a id="more"></a><h2 id="基础实例"><a href="#基础实例" class="headerlink" title="基础实例"></a>基础实例</h2><h2 id="case的组织"><a href="#case的组织" class="headerlink" title="case的组织"></a>case的组织</h2><h2 id="运行命令"><a href="#运行命令" class="headerlink" title="运行命令"></a>运行命令</h2><h2 id="所有可用的设置"><a href="#所有可用的设置" class="headerlink" title="所有可用的设置"></a>所有可用的设置</h2><h2 id="内建库的常用函数"><a href="#内建库的常用函数" class="headerlink" title="内建库的常用函数"></a>内建库的常用函数</h2><h3 id="run-keyword-and-return"><a href="#run-keyword-and-return" class="headerlink" title="run keyword and return"></a>run keyword and return</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run keyword and <span class="built_in">return</span>  My Keyword  arg1 arg2 <span class="comment">#会运行My Keyword并且返回My Keyword的返回值</span></span><br></pre></td></tr></table></figure><h3 id="run-keyword-and-return-if"><a href="#run-keyword-and-return-if" class="headerlink" title="run keyword and return if"></a>run keyword and return if</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">run keyword and <span class="built_in">return</span> <span class="keyword">if</span>  <span class="variable">$&#123;rc&#125;</span> &gt; 0  My Keyword  arg1  arg2 <span class="comment">#当满足条件的时候运行My Keyword并且返回这个的返回值</span></span><br></pre></td></tr></table></figure><h3 id="run-keyword-if"><a href="#run-keyword-if" class="headerlink" title="run keyword if"></a>run keyword if</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;var1&#125;</span> =  run keyword <span class="keyword">if</span>  <span class="variable">$&#123;rc&#125;</span> == 0  Keyword1</span><br><span class="line">...  ELSE IF  0 &lt; <span class="variable">$&#123;rc&#125;</span> &lt; 42  Keyword2</span><br><span class="line">...  ELSE  <span class="variable">$&#123;rc&#125;</span></span><br></pre></td></tr></table></figure><p>${var1} 会根据指定的条件获取到指定的值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$&#123;var2&#125;</span>  run keyword <span class="keyword">if</span>  condition  Keyword</span><br></pre></td></tr></table></figure><p>${var2} 获取到Keyword的值如果条件成立，否则获取到 None。</p><h3 id="append-to-list"><a href="#append-to-list" class="headerlink" title="append to list"></a>append to list</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@&#123;testlist&#125;  Create List</span><br><span class="line">Append To List  <span class="variable">$&#123;testlist&#125;</span>  v1 v2 <span class="comment">#注意了，这里必须使用$&#123;&#125;格式的变量，不能使用@&#123;&#125;格式变量</span></span><br></pre></td></tr></table></figure><p>当然这个keyword是在Collections这个内建库里面。</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>robotframework里面的变量忽略大小写，下划线，以及空格，也就是说 <code>${var}  ${Var}  ${v_ar} ${v ar}</code>都是同一个变量，这个和keyword一样。</p><p>robotfframework里面有一般变量，列表，字典几种类型，分别用 <code>$ @ &amp;</code>修饰，但是其实它们并没有太多影响使用，也就是说一个列表<code>@{var}</code>，可以表示为<code>${var}</code>。</p><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><p>使用<code>@{var}</code>的格式表明是一个列表，<code>@{var}[0]</code>的方式访问第一个元素。</p><h3 id="变量的优先级和作用域"><a href="#变量的优先级和作用域" class="headerlink" title="变量的优先级和作用域"></a>变量的优先级和作用域</h3><p>根据定义变量的方式有不同的作用域和优先级。</p><h4 id="变量的优先级-由高到底排序"><a href="#变量的优先级-由高到底排序" class="headerlink" title="变量的优先级(由高到底排序)"></a>变量的优先级(由高到底排序)</h4><p>内建变量 &gt; 执行测试设置的变量 &gt; 命令行 &gt; table表 &gt; resource或者variable文件引入</p><ol><li>内建变量，比如${TEMPDIR}拥有最高的优先级。</li><li>测试过程中产生的变量，比如使用set test/suite/global variable keywords产生的变量，<strong>会覆盖已经存在的在当前作用域内的变量</strong>(也就是说，如果一个case的variable里面有一个变量，先于这个case运行的任何文件里面使用了set global variable这个keyword的话，这个变量会被替换为global的值)，虽然优先级较高，但是不会影响作用域外的变量。</li><li>命令行变量，会覆盖variable table和资源文件里面的所有变量，命令行变量可以被设置多次，只有最后一个生效。</li><li>table表变量，可用于定义这个变量的文件的任意位置，会覆盖资源文件引入的变量。</li><li>资源文件变量，资源文件引入多个相同的变量，第一个引入的变量生效。</li></ol><h4 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h4><ol><li>全局作用域: 可以在全局任意一个地方可用，可以通过命令行和set global variable设置，当然也包括内建变量。</li><li>测试套作用域: 可以在当前测试套种使用的，比如当前测试文件引入的，当前文件的variable table里面定义的，或者 set suite variable定义的。</li><li>测试用例作用域: 可以在当前测试用例中使用，一般通过set test variable设置的。</li><li>本地作用域: 比如keyword的参数，keyword获得的返回值等。<h2 id="keyword"><a href="#keyword" class="headerlink" title="keyword"></a>keyword</h2><h2 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h2><h2 id="用户自定义测试库"><a href="#用户自定义测试库" class="headerlink" title="用户自定义测试库"></a>用户自定义测试库</h2></li></ol><h3 id="自定义测试lib接受列表"><a href="#自定义测试lib接受列表" class="headerlink" title="自定义测试lib接受列表"></a>自定义测试lib接受列表</h3><p>假如用python定义了一个自己的keyword，并且接受列表，比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_lib</span><span class="params">(*this_is_list)</span>:</span></span><br></pre></td></tr></table></figure><p>那么在robotframework中需要使用如下格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test_lib  a  b  c d</span><br></pre></td></tr></table></figure><p>注意参数空格，a和b都是前后两个空格，c和d之间只有一个空格，那么参数类似于：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c d'</span>]</span><br></pre></td></tr></table></figure></p><h2 id="内部API"><a href="#内部API" class="headerlink" title="内部API"></a>内部API</h2><p>robotframework提供了很多内部api，这个是可以使用python获取java直接调用的函数。下面介绍一些常用的。<br>文档：<a href="http://robot-framework.readthedocs.io/en/v3.0.4/" target="_blank" rel="noopener">http://robot-framework.readthedocs.io/en/v3.0.4/</a></p><h3 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h3><p>在<code>robot.api</code>这个包下的<code>logger</code>模块，如果要使用，需要引入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> robot.api <span class="keyword">import</span> logger</span><br></pre></td></tr></table></figure><p><code>logger</code>模块有几个函数，<code>write</code>, <code>trace</code>, <code>debug</code>, <code>info</code>, <code>warn</code>, <code>error</code>, <code>console</code>，所有函数的第一个参数都是你想打印的信息，注意<code>console</code>只会打印到命令行里面，日志里面没有，<code>info</code>默认不会显示到命令行，但是有一个<code>also_console</code>参数，设置为<code>true</code>，即可以打印到控制台，也可以输出到日志。</p><p>具体参见：<a href="http://robot-framework.readthedocs.io/en/v3.0.4/autodoc/robot.api.html#module-robot.api.logger" target="_blank" rel="noopener">http://robot-framework.readthedocs.io/en/v3.0.4/autodoc/robot.api.html#module-robot.api.logger</a></p><h2 id="直接调用python函数"><a href="#直接调用python函数" class="headerlink" title="直接调用python函数"></a>直接调用python函数</h2><h3 id="转码"><a href="#转码" class="headerlink" title="转码"></a>转码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;ret.decode(<span class="string">'utf-8'</span>)&#125; <span class="comment"># 这里ret是任意一个字符串，通过直接调用decode函数可以进行解码操作</span></span><br><span class="line"><span class="comment">#同理</span></span><br><span class="line">$&#123;ret.lower()&#125; <span class="comment">#可以直接返回小写</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> robotframework </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[英语语法]-英语语法简单入门</title>
      <link href="/2018/04/26/en-grammer/"/>
      <url>/2018/04/26/en-grammer/</url>
      <content type="html"><![CDATA[<p>本文主要记录了个人学习英语语法的一些备忘录。</p><a id="more"></a><h2 id="表语"><a href="#表语" class="headerlink" title="表语"></a>表语</h2><p>表语是紧跟系动词之后的结构，一般称及物动词之后的结构为宾语，系动词之后的结构为表语。<br>表语用来表述主语的身份，状态，特征等信息。</p><p>He looks good. look这里作为系动词，good是一个形容词，作为表语。</p><p>常用的系动词有：</p><blockquote><p>am/is/are keep seem appear become feel get grow remain smell look sound stay taste</p></blockquote><p>大多数情况，系动词也具有及物动词的词性，请看下面的两个keep：</p><h3 id="句1"><a href="#句1" class="headerlink" title="句1"></a>句1</h3><p>I <em>keep</em> silent in class.</p><h3 id="句2"><a href="#句2" class="headerlink" title="句2"></a>句2</h3><p>I <em>keep</em> books in my room.</p><h3 id="我们先看下系动词的两个特点"><a href="#我们先看下系动词的两个特点" class="headerlink" title="我们先看下系动词的两个特点"></a>我们先看下系动词的两个特点</h3><ol><li><strong>系动词后可以跟名词和形容词，而及物动词后只能跟名词</strong></li><li><strong>系动词在替换为be动词之后，句子语义基本不变</strong></li></ol><p>请看：</p><p>系动词之后接名词：<br>Adventure <em>becomes</em> a part of my life.<br>Pollution <em>remains</em> a troubling problem.</p><p>系动词之后接形容词(一般及物动词不具有这个特性)：<br>She <em>looks</em> a little tired.<br>The shop <em>stays</em> open.</p><p>系动词替换为be动词之后，语义基本不变：<br>Adventure <em>is</em> a part of my life.<br>She <em>was</em> a little tired.</p><p>好，现在来看<a href="#句1">句1</a>和<a href="#句2">句2</a>的比较：<br>根据<a href="#我们先看下系动词的两个特点">系动词特点</a>1，可以发现<a href="#句1">句子1</a>中的<em>keep</em>肯定是系动词，应为silent是形容词，及物动词不具有这个特性。<br>那么根据<a href="#我们先看下系动词的两个特点">特点1</a>无法判断<a href="#句2">句子2</a>的<em>keep</em>属性，因为book是一个名词，系动词和及物动词都有这个特性，那么根据<a href="#我们先看下系动词的两个特点">特点2</a>进行判断，把<em>keep</em>替换为be动词查看语义是否变化：<br>I is books in my room.显然这个句子是有歧义的，那么就不是系动词，因为替换后的语义都变化了，所以这里也不能进行替换，那么<em>keep</em>就是一个及物动词。i</p><h2 id="定语"><a href="#定语" class="headerlink" title="定语"></a>定语</h2><p>定语是一个广义的概念，其本质是形容词词性，可以修饰名词和代词。</p><h2 id="状语"><a href="#状语" class="headerlink" title="状语"></a>状语</h2><p>类似于定语，是一个广义的概念，本质是副词词性，可以修饰除了名词和代词以外的结构，比如动词，形容词，副词</p><h2 id="补语"><a href="#补语" class="headerlink" title="补语"></a>补语</h2><p>补语是对宾语的补充说明。</p><p>中文的补语：有一类动词可以改变宾语的动作或者状态，例如： 我要求学生们去学习跳舞，要求这个动词，如果省略了补语，句子意义不完整： 我要求学生们，宾语加上补语，可以单独成句，并且意义变换不大，学生们去学习跳舞。</p><p>英语的补语也类似， I have my hair dyed. have在这里表示 使得，把 的意思， I have my hair去掉补语句子意义不完整，my hair be dyed, 句子意义基本不变。</p><p>其实补语是由名词从句省略得来的。</p><p>I found that the homework was difficult.<br>I found the homework difficult.</p><p>形容词，不定式，分词等结构都可以作为补语。</p><h2 id="注意每个单词的词性"><a href="#注意每个单词的词性" class="headerlink" title="注意每个单词的词性"></a>注意每个单词的词性</h2><p>比如 more than 这个词组</p><p>首先我们看一下more这个词通过字典查出来的词性：</p><p><img src="/2018/04/26/en-grammer/more.png" alt="more"></p><p>We had more than they did. 这里的more是名词，<code>更多</code>的意思</p><p>We had more food that they did. 这里的more是形容词，修饰food，表示<code>更多的</code>的意思</p><p>We talked more than they did. 这里的more是副词，修饰talk，表示<code>更多</code>的意思</p><h2 id="语法框架"><a href="#语法框架" class="headerlink" title="语法框架"></a>语法框架</h2><p>名词：主 宾 表 补<br>形容词：定 表 补<br>副词： 状<br>动词： 谓</p><p>英语中绝大部分句子是由 “<strong>四大词性</strong>“ 和 “<strong>七类辅助结构</strong>“构成的，也就是 名词 形容词 副词 动词 和 介词短语 名词从句 定语从句 状语从句 动名词 分词 不定式。</p><p><img src="/2018/04/26/en-grammer/en1.png" alt="english"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://zhuanlan.zhihu.com/adingdemao" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/adingdemao</a></p>]]></content>
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[python]-字典的使用</title>
      <link href="/2018/04/26/py-dict/"/>
      <url>/2018/04/26/py-dict/</url>
      <content type="html"><![CDATA[<p>本文以python3.6.5本本为例。</p><a id="more"></a><h2 id="字典基础操作"><a href="#字典基础操作" class="headerlink" title="字典基础操作"></a>字典基础操作</h2><h3 id="判断key是否在字典中"><a href="#判断key是否在字典中" class="headerlink" title="判断key是否在字典中"></a>判断key是否在字典中</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: test_dict</span><br><span class="line">Out[<span class="number">2</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: <span class="keyword">if</span> <span class="string">'a'</span> <span class="keyword">in</span> test_dict:</span><br><span class="line">   ...:     print(<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">True</span></span><br></pre></td></tr></table></figure><h3 id="遍历字典的key"><a href="#遍历字典的key" class="headerlink" title="遍历字典的key"></a>遍历字典的key</h3><p>方式一：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">12</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> test_dict:</span><br><span class="line">    ...:     print(i, end=<span class="string">' '</span>)</span><br><span class="line">a b c</span><br></pre></td></tr></table></figure></p><p>方式二：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">13</span>]: <span class="keyword">for</span> i <span class="keyword">in</span> test_dict.keys():</span><br></pre></td></tr></table></figure></p><blockquote><p>注意python3里面没有iterkeys()这个函数了。</p></blockquote><h3 id="获取字典的值"><a href="#获取字典的值" class="headerlink" title="获取字典的值"></a>获取字典的值</h3><h4 id="get-key-value-None"><a href="#get-key-value-None" class="headerlink" title="get(key, value=None)"></a>get(key, value=None)</h4><p>有一种情况，当字典存在某个key时，把key对应的值赋值给某个变量，当不存在这个key时，这个变量获得None值。使用dict.get()方法可以完成这个逻辑。<br>get方法接收两个参数，第一个是需要判定的key，第二个是如果key不存在时此方法返回的值，默认值是None，函数返回key对应的值或者第二个参数的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">27</span>]: test_dict</span><br><span class="line">Out[<span class="number">27</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">28</span>]: test_dict.get(<span class="string">'a'</span>) <span class="comment">#'a'这个key在字典中，所以返回实际的值</span></span><br><span class="line">Out[<span class="number">28</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">29</span>]: test_dict.get(<span class="string">'d'</span>, <span class="number">4</span>) <span class="comment">#'d'这个key不在字典中，所以返回第二个参数的值4</span></span><br><span class="line">Out[<span class="number">29</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">30</span>]: print(test_dict.get(<span class="string">'e'</span>)) <span class="comment">#'e'这个key不在字典中，没有提供第二个参数，返回None</span></span><br><span class="line"><span class="keyword">None</span></span><br></pre></td></tr></table></figure><h4 id="setdefault-key-value-None"><a href="#setdefault-key-value-None" class="headerlink" title="setdefault(key, value=None)"></a>setdefault(key, value=None)</h4><p>当key存在于字典中，那么返回这个key对应的值，如果不存在，则设置字典的key为对应的value，并且返回vlaue。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">31</span>]: test_dict</span><br><span class="line">Out[<span class="number">31</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">32</span>]: test_dict.setdefault(<span class="string">'a'</span>, <span class="number">3</span>)</span><br><span class="line">Out[<span class="number">32</span>]: <span class="number">1</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">33</span>]: test_dict</span><br><span class="line">Out[<span class="number">33</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: test_dict.setdefault(<span class="string">'d'</span>, <span class="number">4</span>)</span><br><span class="line">Out[<span class="number">34</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">35</span>]: test_dict</span><br><span class="line">Out[<span class="number">35</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">36</span>]: test_dict.setdefault(<span class="string">'d'</span>)</span><br><span class="line">Out[<span class="number">36</span>]: <span class="number">4</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">37</span>]: test_dict.setdefault(<span class="string">'e'</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">38</span>]: test_dict</span><br><span class="line">Out[<span class="number">38</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'e'</span>: <span class="keyword">None</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="同时遍历key和value"><a href="#同时遍历key和value" class="headerlink" title="同时遍历key和value"></a>同时遍历key和value</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">42</span>]: test_dict</span><br><span class="line">Out[<span class="number">42</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'e'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">43</span>]: <span class="keyword">for</span> k, v <span class="keyword">in</span> test_dict.items():</span><br><span class="line">    ...:     print(k, v)</span><br><span class="line">    ...:</span><br><span class="line">a <span class="number">1</span></span><br><span class="line">b <span class="number">2</span></span><br><span class="line">c <span class="number">3</span></span><br><span class="line">d <span class="number">4</span></span><br><span class="line">e <span class="keyword">None</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： python3已经没有iteritems()函数。</p></blockquote><h2 id="字典视图对象"><a href="#字典视图对象" class="headerlink" title="字典视图对象"></a>字典视图对象</h2><p>字典视图可以动态反馈字典的各种修改。</p><p>使用dict.keys(), dict.values(), dict.items()返回的就是字典的视图对象。</p><blockquote><p>python2里面是通过dict.viewkeys(), dict.viewvalues(), dict.viewitems()返回的字典视图对象。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">44</span>]: test_dict</span><br><span class="line">Out[<span class="number">44</span>]: &#123;<span class="string">'a'</span>: <span class="number">1</span>, <span class="string">'b'</span>: <span class="number">2</span>, <span class="string">'c'</span>: <span class="number">3</span>, <span class="string">'d'</span>: <span class="number">4</span>, <span class="string">'e'</span>: <span class="keyword">None</span>&#125;</span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: keys = test_dict.keys()</span><br><span class="line"></span><br><span class="line">In [<span class="number">46</span>]: keys</span><br><span class="line">Out[<span class="number">46</span>]: dict_keys([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">47</span>]: values = test_dict.values()</span><br><span class="line"></span><br><span class="line">In [<span class="number">48</span>]: values</span><br><span class="line">Out[<span class="number">48</span>]: dict_values([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="keyword">None</span>])</span><br><span class="line"></span><br><span class="line">In [<span class="number">49</span>]: len(keys)</span><br><span class="line">Out[<span class="number">49</span>]: <span class="number">5</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: test_dict.setdefault(<span class="string">'f'</span>, <span class="number">6</span>)</span><br><span class="line">Out[<span class="number">50</span>]: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: len(keys)</span><br><span class="line">Out[<span class="number">51</span>]: <span class="number">6</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: keys</span><br><span class="line">Out[<span class="number">52</span>]: dict_keys([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>])</span><br></pre></td></tr></table></figure><h2 id="lib-OrderedDict"><a href="#lib-OrderedDict" class="headerlink" title="lib-OrderedDict"></a>lib-OrderedDict</h2><p>我们知道，dict是无序的，也就是说我们插入数据以后，我们的数据在dict里面是无序的，不是按照插入的顺序排列的，python提供了OrdereDict这个类，保证了dict是按照我们插入的顺序排列的。</p><p>使用之前需要引入：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDcit</span><br></pre></td></tr></table></figure></p><p>使用方法和一般字典使用方法一致。注意函数popitem()的使用。</p><h3 id="popitem"><a href="#popitem" class="headerlink" title="popitem()"></a>popitem()</h3><p>在一般字典中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict.popitem()</span><br></pre></td></tr></table></figure></p><p>返回(key, value)并且从字典中移除这一队值，注意，这里移除是任意的，不确定移除谁，因为dict是无序的。如果字典是空，这里将抛出KeyError异常</p><p>在OrderedDict中：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ord.popitem(last=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure></p><p>这里有一个参数last，默认是True，表示移除最后一个元素，如果为False，则移除第一个元素，这里移除的内容就一定是确定的。同理，字典为空，抛出KeyError异常。</p><h3 id="move-to-end"><a href="#move-to-end" class="headerlink" title="move_to_end()"></a>move_to_end()</h3><p>OrderdDict多了一个<code>move_to_end</code>函数，有两个参数，第一个参数是待移动的key，第二个参数表示移动到最后(True默认值)还是移动到开头(False)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ord.move_to_end(key, last=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><p>同理，如果key不存在，抛出KeyError错误。</p><h2 id="lib-defaultdict"><a href="#lib-defaultdict" class="headerlink" title="lib-defaultdict"></a>lib-defaultdict</h2><p>是dict的子类，但是提供了一个参数用于初始化字典的key对应的值</p><p>同样需要先引入<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br></pre></td></tr></table></figure></p><p>结构如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaultdict(default_factory=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure></p><p>使用实例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">92</span>]: a = defaultdict(list)</span><br><span class="line">In [<span class="number">95</span>]: a[<span class="string">'a'</span>]</span><br><span class="line">Out[<span class="number">95</span>]: []</span><br></pre></td></tr></table></figure></p><p>上面定义了一个defaultdict实例a，并且参数是list，我们并没有定义a的key ‘a’，但是后面直接使用a[‘a’]并没有报错，而是直接输出了一个空的列表。也就是说如果默认情况下，使用一个不存在的key，defaultdict会创建这个key，并且赋初始值为<code>default_factory</code>。</p>]]></content>
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[linux]-vim</title>
      <link href="/2018/04/26/linux-vim/"/>
      <url>/2018/04/26/linux-vim/</url>
      <content type="html"><![CDATA[<p>本文主要记录常用的一些vim操作。</p><a id="more"></a><h2 id="复制粘贴"><a href="#复制粘贴" class="headerlink" title="复制粘贴"></a>复制粘贴</h2><p>y 是复制命令<br>p 是粘贴命令<br>d 是剪切命令<br>v 是选中命令</p><p>可以结合下面几个参数进行操作，下面用y复制命令说明，其它几个命令类似</p><p>yw 复制一个单词<br>yy 复制一行<br>y$ 复制到行尾<br>y^ 复制到行首<br>yG 复制到文件尾<br>y1G 复制到文件首</p><h2 id="取消上一步操作"><a href="#取消上一步操作" class="headerlink" title="取消上一步操作"></a>取消上一步操作</h2><p>直接输入<code>:u</code> 即可</p><h2 id="快速跳转"><a href="#快速跳转" class="headerlink" title="快速跳转"></a>快速跳转</h2><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>gg 快速回到文件首部<br>GG 快速回到文件尾部</p><h3 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h3><p>在普通模式下，直接按<code>ma</code>，可以在当前光标所在行设置一个标记a，在其它地方使用<code>&#39;a</code>可以快速回到这里，类似<code>less</code>命令的标记。</p><h2 id="显示行号"><a href="#显示行号" class="headerlink" title="显示行号"></a>显示行号</h2><p>在命令模式下(也就是输入<code>:</code>这个的情况下)，输入<code>set number</code>即可</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><h3 id="忽略大小写"><a href="#忽略大小写" class="headerlink" title="忽略大小写"></a>忽略大小写</h3><p>在命令行模式下输入<code>set ignorecase</code>即可，要恢复大小写匹配，输入<code>set noignorecase</code></p><h2 id="文本替换"><a href="#文本替换" class="headerlink" title="文本替换"></a>文本替换</h2><h3 id="全文替换"><a href="#全文替换" class="headerlink" title="全文替换"></a>全文替换</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s/old/new/g</span><br></pre></td></tr></table></figure><h2 id="文本查找"><a href="#文本查找" class="headerlink" title="文本查找"></a>文本查找</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/search_key</span><br></pre></td></tr></table></figure><p>n查找下一个，N查找上一个。</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[Linux]-文件查看操作</title>
      <link href="/2018/04/26/linux-view-file/"/>
      <url>/2018/04/26/linux-view-file/</url>
      <content type="html"><![CDATA[<p>本文主要对Linux下查看文件的几个命令的常用方式进行了总结，没有进行详细解释，适合作为查阅，备忘。</p><a id="more"></a><h2 id="cat"><a href="#cat" class="headerlink" title="cat"></a>cat</h2><p>一次显示整个文件，参数:</p><p>-n: 输出行号<br>-b: 输出行号，但是忽略空白行</p><h2 id="more"><a href="#more" class="headerlink" title="more"></a>more</h2><p>每次显示一屏内容</p><p>按键：<br>enter 下一行<br>space 下一屏<br>= 显示当前行号<br>:f 显示当前文件和行号<br>ctrl+b 上一屏(对应的ctrl+f下一屏)</p><p>参数：<br>+num 从num行开始显示<br>-num 每屏显示num行<br>+/pattern 从第一个匹配pattern的前两行开始显示</p><p>举例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ more +10 file</span><br><span class="line">$ more -10 file</span><br><span class="line">$ more +10 -10 file</span><br><span class="line">$ more +/<span class="built_in">test</span> -10 file</span><br></pre></td></tr></table></figure></p><h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><p>类似于<a href="#more">more</a>，但是less支持使用page down 和 page up进行翻页。<br>less 和 more 都支持v命令直接调用vim编辑器，都支持-s参数把多个连续的空行显示为一行。</p><p>按键：<br>enter 下一行<br>y 上一行<br>g 调到最开始<br>G 调到最末尾<br>n 显示下一个搜索的匹配<br>N 显示上一个搜索的匹配<br>m 输入以后会提示输入标记，比如输入a，那么当浏览到其它内容以后，想回到a这个标记点，输入’a就可以了</p><p>参数：<br>-i 文章内进行搜索的时候忽略大小写<br>-N 显示行号<br>-M 显示读取进度，显示内容类似：<code>iperft lines 19-48/1836 3%</code> 分别表示文件名iperft，当前屏幕显示的是19-48行，总共1836行</p><h2 id="head"><a href="#head" class="headerlink" title="head"></a>head</h2><p>默认显示文件的前10行，-n num参数可以指定显示多少行，这个参数对<a href="#tail">tail</a>命令也适用。</p><h2 id="tail"><a href="#tail" class="headerlink" title="tail"></a>tail</h2><p>默认显示文件的最后10行</p><h2 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h2><p>可以进行字符匹配，-i 忽略大小写， -n 显示行号， -v 反向匹配</p><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ grep -i <span class="built_in">test</span> file</span><br><span class="line">$ grep -ni <span class="built_in">test</span> file</span><br><span class="line">$ ps -ef | grep firefox -v grep</span><br></pre></td></tr></table></figure><h2 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h2><p>计算byte，字数或者列数</p><p>比如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll | wc -l <span class="comment">#显示ll命令回显有多少行</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>[SQL]-sql基础</title>
      <link href="/2018/04/25/db-sql-basic/"/>
      <url>/2018/04/25/db-sql-basic/</url>
      <content type="html"><![CDATA[<p>本文主要介绍了sql(Structured Query Language)语句的基本使用，主要使用mysql进行操作。桌面可视化工具可以使用HeidiSQL或者Navicat。</p><a id="more"></a><p>参考链接:</p><ul><li><a href="http://www.w3school.com.cn/sql/" target="_blank" rel="noopener">http://www.w3school.com.cn/sql/</a></li></ul><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>数据库是数据的容器，在做任何有关数据的操作时，都需要创建一个数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] database_name;</span><br></pre></td></tr></table></figure><p>注意 <code>IF NOT EXISTS</code>语句是可选的，这句话的意思是如果在服务器已经有了和当前需要创建的数据库同名的数据库，就不创建。</p><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><p>mysql等数据库，都是需要用表来存放数据的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] table_name(</span><br><span class="line">    column_list</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>举例:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> test_table(</span><br><span class="line">    table_id <span class="built_in">INT</span> AUTO_INCREMENT, #设置一个列，取名叫table_id，数据类型为<span class="built_in">INT</span>，并且是自动增长的</span><br><span class="line">    title <span class="built_in">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>, #创建title列，数据类型为<span class="built_in">VARCHAR</span>类型，最长<span class="number">10</span>，并且不为空</span><br><span class="line">    create_date <span class="built_in">DATE</span>, #创建create_date列，数据类型为<span class="built_in">DATE</span>，可以为空</span><br><span class="line">    usercount <span class="built_in">INT</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>, #创建usercount列，设置默认值为<span class="number">0</span></span><br><span class="line">    PRIMARY <span class="keyword">KEY</span> (table_id), #设置主键为table_id</span><br><span class="line">    <span class="keyword">UNIQUE</span> (title), #设置title必须唯一</span><br><span class="line">    <span class="keyword">CHECK</span> (usercount&gt;<span class="number">-1</span>), #设置usercount列的数据不能是负数</span><br><span class="line">    FOREGIN <span class="keyword">KEY</span> (another_id) <span class="keyword">REFERENCES</span> anoter_table(another_id), #设置another_id列，并且与anoter_table表的another_id关联</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>解释:</p><blockquote><p>主键的作用：确定了数据的唯一性，便于其它表的关联，配合索引提升数据查找性能<br>SQL约束：<code>NOT NULL</code>, <code>UNIQUE</code>, <code>PRIMARY KEY</code>, <code>FOREIGN KEY</code>, <code>DEFAULT</code>, <code>CHECK</code></p></blockquote><h3 id="SELECT语句"><a href="#SELECT语句" class="headerlink" title="SELECT语句"></a>SELECT语句</h3><p>基本语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><p>或者:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><h3 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h3><p>有时候我们选取的数据有重复的情况，但是我们只想让它只显示一次。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> column1 <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure><h3 id="WHERE语句"><a href="#WHERE语句" class="headerlink" title="WHERE语句"></a>WHERE语句</h3><p>基本语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> cloumn_name=<span class="string">'condition'</span>;</span><br></pre></td></tr></table></figure><h3 id="INSERT语句"><a href="#INSERT语句" class="headerlink" title="INSERT语句"></a>INSERT语句</h3><p>基本语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 指定列名插入</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name(column1, column2) <span class="keyword">VALUES</span> (value1, value2);</span><br><span class="line"></span><br><span class="line"># 指定列名插入多条数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name(column1, column2) <span class="keyword">VALUES</span> (value1, value2), (value11, value22);</span><br><span class="line"></span><br><span class="line"># 如果插入全部数据，可以不指定列名，注意自动增加的字段可以不写</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name <span class="keyword">VALUES</span> (value1, value2);</span><br><span class="line"></span><br><span class="line"># 不指定列名插入多条数据</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name <span class="keyword">VALUES</span> (value1, value2), (value11, value22);</span><br></pre></td></tr></table></figure><h3 id="UPDATE语句"><a href="#UPDATE语句" class="headerlink" title="UPDATE语句"></a>UPDATE语句</h3><p>基本语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name <span class="keyword">SET</span> column1 = new_value1, column2 = new_value2 <span class="keyword">WHERE</span> condition;</span><br></pre></td></tr></table></figure><p>注意: SET后面是需要更新的列，指定多列，中间用英文的逗号分开，WHERE语句是可选的，如果没有这个语句，默认更新所有的行的数据。</p><h3 id="DELETE语句"><a href="#DELETE语句" class="headerlink" title="DELETE语句"></a>DELETE语句</h3><p>基本语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> condition;</span><br></pre></td></tr></table></figure><p>注意: 如果没有WHERE子句进行限制，默认删除所有的数据。</p><h3 id="COUNT函数"><a href="#COUNT函数" class="headerlink" title="COUNT函数"></a>COUNT函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> table_name;</span><br><span class="line"><span class="keyword">SELECT</span> column1, <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column2=condition;</span><br></pre></td></tr></table></figure><h3 id="GROUP-BY"><a href="#GROUP-BY" class="headerlink" title="GROUP BY"></a>GROUP BY</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column1 <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column1=condition;</span><br></pre></td></tr></table></figure><h3 id="ORDER-BY-DESC"><a href="#ORDER-BY-DESC" class="headerlink" title="ORDER BY(DESC)"></a>ORDER BY(DESC)</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> column1;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">ORDER</span> <span class="keyword">BY</span> column1 <span class="keyword">DESC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> column1, column2 <span class="keyword">FROM</span> table_name <span class="keyword">GROUP</span> <span class="keyword">BY</span> column1 <span class="keyword">ORDER</span> <span class="keyword">BY</span> column2;</span><br></pre></td></tr></table></figure><h3 id="LIKE"><a href="#LIKE" class="headerlink" title="LIKE"></a>LIKE</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> column1 <span class="keyword">LIKE</span> <span class="string">'auto%'</span>;</span><br></pre></td></tr></table></figure><p>其中<code>%</code>可以匹配多个多个，<code>_</code>只能匹配单个字符</p><h3 id="AVG函数"><a href="#AVG函数" class="headerlink" title="AVG函数"></a>AVG函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(<span class="keyword">column</span>) <span class="keyword">FROM</span> table_name;</span><br><span class="line"><span class="keyword">SELECT</span> column1, column2 <span class="keyword">FROM</span> table_name <span class="keyword">WHERE</span> columnx &gt; (<span class="keyword">SELECT</span> <span class="keyword">AVG</span>(columny) <span class="keyword">FROM</span> table_name);</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2017/04/26/hello-world/"/>
      <url>/2017/04/26/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><p>222698602</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">None</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> markdown </category>
          
      </categories>
      
      
    </entry>
    
  
  
</search>
